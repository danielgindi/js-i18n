{"version":3,"file":"i18n.js","sources":["src/utils.js","src/string_case_permutations.js","src/date_formats.js","src/printf_specs.js","src/i18n.js"],"sourcesContent":["// Helper function to extend an object using a synthetic object structure from dotted syntax to a real nested structure.\r\nfunction extendDotted(target, data) {\r\n    if (data == null) return;\r\n    let dotted, targetDotted, i;\r\n    for (let key in data) {\r\n        if (!data.hasOwnProperty(key) || !data[key]) continue;\r\n        dotted = key.split('.');\r\n        targetDotted = target;\r\n        for (i = 0; i < dotted.length - 1; i++) {\r\n            targetDotted = targetDotted[dotted[i]];\r\n        }\r\n        targetDotted[dotted[dotted.length - 1]] = data[key];\r\n    }\r\n}\r\n\r\nconst ESCAPE_REGEX = /([\\/()[\\]?{}|*+-\\\\:])/g;\r\n\r\nfunction regexEscape(string) {\r\n    return string.replace(ESCAPE_REGEX, '\\\\$1');\r\n}\r\n\r\nfunction arrayToRegex(array) {\r\n    let regex = '';\r\n    for (let i = 0; i < array.length; i++) {\r\n        if (i > 0) regex += '|';\r\n        regex += regexEscape(array[i]);\r\n    }\r\n    return regex;\r\n}\r\n\r\n/**\r\n * Pad a value with characters on the left\r\n * @param {string|Number} value the value to pad\r\n * @param {Number} length minimum length for the output\r\n * @param {string} ch the character to use for the padding\r\n * @returns {*}\r\n */\r\nfunction padLeft(value, length, ch) {\r\n    value = value.toString();\r\n    while (value.length < length)\r\n        value = ch + value;\r\n    return value;\r\n}\r\n\r\nexport {extendDotted, regexEscape, arrayToRegex, padLeft};","function recurse(results, lower, upper, hasCase, pre) {\r\n\r\n    const len = lower.length;\r\n    let currenLen = pre.length;\r\n\r\n    while (currenLen < len && !hasCase[currenLen]) {\r\n        pre += lower[currenLen++];\r\n    }\r\n\r\n    if (currenLen === len) {\r\n        return results.push(pre);\r\n    }\r\n\r\n    recurse(results, lower, upper, hasCase, pre + lower[currenLen]);\r\n    recurse(results, lower, upper, hasCase, pre + upper[currenLen]);\r\n}\r\n\r\n/**\r\n * Generate an array of all lowercase-uppercase combinations of a given string\r\n * @param {string} text\r\n * @returns {string[]}\r\n */\r\nfunction generateAllCasePermutations(text) {\r\n    text = text + '';\r\n    if (!text) return null;\r\n\r\n    const results = [];\r\n    const lower = text.split('');\r\n    const upper = [];\r\n    const hasCase = [];\r\n\r\n    let i = 0;\r\n    const len = text.length;\r\n    for (; i < len; i++) {\r\n        lower[i] = lower[i].toLowerCase();\r\n        upper[i] = lower[i].toUpperCase();\r\n        hasCase[i] = upper[i] !== lower[i];\r\n    }\r\n\r\n    recurse(results, lower, upper, hasCase, '');\r\n\r\n    return results;\r\n}\r\n\r\nexport {generateAllCasePermutations};","import {generateAllCasePermutations} from './string_case_permutations.js';\r\nimport {padLeft, arrayToRegex} from './utils.js';\r\n\r\nconst DATE_FORMAT_REGEX = /d{1,4}|M{1,4}|yy(?:yy)?|([HhmsTt])\\1?|[LloSZ]|UTC|('[^'\\\\]*(?:\\\\.[^'\\\\]*)*')|(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\")|(\\[[^\\]\\\\]*(?:\\\\.[^\\]\\\\]*)*])/g;\r\nconst DATE_TIMEZONE_REGEX = /\\b(?:[PMCEA][SDP]T|[a-zA-Z ]+ (?:Standard|Daylight|Prevailing) Time|(?:GMT|UTC)?(?:[-+]\\d{4})?)\\b/g;\r\nconst DATE_TIMEZONE_CLIP_REGEX = /[^-+\\dA-Z]/g;\r\n\r\n/** @typedef {{d: function, D: function, M: function, y: function, H: function, m: function, s: function, L: function, o: function, utcd: function, utc: function}} FlagMap */\r\n\r\n/** @type {FlagMap} */\r\nconst DATE_FLAG_SUBMAP_LOCAL = {\r\n    /** @param {Date} d */\r\n    /** @returns {number} */ 'd': d => d.getDate(),\r\n    /** @param {Date} d */\r\n    /** @returns {number} */ 'D': d => d.getDay(),\r\n    /** @param {Date} d */\r\n    /** @returns {number} */ 'M': d => d.getMonth(),\r\n    /** @param {Date} d */\r\n    /** @returns {number} */ 'y': d => d.getFullYear(),\r\n    /** @param {Date} d */\r\n    /** @returns {number} */ 'H': d => d.getHours(),\r\n    /** @param {Date} d */\r\n    /** @returns {number} */ 'm': d => d.getMinutes(),\r\n    /** @param {Date} d */\r\n    /** @returns {number} */ 's': d => d.getSeconds(),\r\n    /** @param {Date} d */\r\n    /** @returns {number} */ 'L': d => d.getMilliseconds(),\r\n    /** @param {Date} d */\r\n    /** @returns {number} */ 'o': d => 0,\r\n    /** @param {Date} d */\r\n    /** @returns {string} */ 'utcd': d => ((d + '').match(DATE_TIMEZONE_REGEX) || ['']).pop().replace(DATE_TIMEZONE_CLIP_REGEX, ''),\r\n    /** @param {Date} d */\r\n    /** @returns {string} */ 'utc': d => {\r\n        let z = d.getTimezoneOffset();\r\n        const s = (z > 0 ? '-' : '+');\r\n        z = z < 0 ? -z : z;\r\n        const zm = z % 60;\r\n        return s + padLeft((z - zm) / 60, 2, '0') + (zm ? padLeft(zm, 2, '0') : '');\r\n    }\r\n};\r\n\r\n/** @type {FlagMap} */\r\nconst DATE_FLAG_SUBMAP_UTC = {\r\n    /** @param {Date} d */ /** @returns {number} */ 'd': d => d.getUTCDate(),\r\n    /** @param {Date} d */ /** @returns {number} */ 'D': d => d.getUTCDay(),\r\n    /** @param {Date} d */ /** @returns {number} */ 'M': d => d.getUTCMonth(),\r\n    /** @param {Date} d */ /** @returns {number} */ 'y': d => d.getUTCFullYear(),\r\n    /** @param {Date} d */ /** @returns {number} */ 'H': d => d.getUTCHours(),\r\n    /** @param {Date} d */ /** @returns {number} */ 'm': d => d.getUTCMinutes(),\r\n    /** @param {Date} d */ /** @returns {number} */ 's': d => d.getUTCSeconds(),\r\n    /** @param {Date} d */ /** @returns {number} */ 'L': d => d.getUTCMilliseconds(),\r\n    /** @param {Date} d */ /** @returns {number} */ 'o': d => d.getTimezoneOffset(),\r\n    /** @param {Date} d */ /** @returns {string} */ 'utcd': () => \"UTC\",\r\n    /** @param {Date} d */ /** @returns {string} */ 'utc': () => \"Z\"\r\n};\r\n\r\nconst DATE_FLAG_MAP = {\r\n    /** @param {FlagMap} fmap */ /** @return {string} */\r\n    'd': (o, fmap) => fmap.d(o),\r\n\r\n    /** @param {FlagMap} fmap */ /** @return {string} */\r\n    'dd': (o, fmap) => padLeft(fmap.d(o), 2, '0'),\r\n\r\n    /** @param {FlagMap} fmap */ /** @return {string} */\r\n    'ddd': (o, fmap, culture) => culture['weekdays_short'][fmap.D(o)],\r\n\r\n    /** @param {FlagMap} fmap */ /** @return {string} */\r\n    'dddd': (o, fmap, culture) => culture['weekdays'][fmap.D(o)],\r\n\r\n    /** @param {FlagMap} fmap */ /** @return {string} */\r\n    'M': (o, fmap) => fmap.M(o) + 1,\r\n\r\n    /** @param {FlagMap} fmap */ /** @return {string} */\r\n    'MM': (o, fmap) => padLeft(fmap.M(o) + 1, 2, '0'),\r\n\r\n    /** @param {FlagMap} fmap */ /** @return {string} */\r\n    'MMM': (o, fmap, culture) => culture['months_short'][fmap.M(o)],\r\n\r\n    /** @param {FlagMap} fmap */ /** @return {string} */\r\n    'MMMM': (o, fmap, culture) => culture['months'][fmap.M(o)],\r\n\r\n    /** @param {FlagMap} fmap */ /** @return {string} */\r\n    'yy': (o, fmap) => String(fmap.y(o)).slice(2),\r\n\r\n    /** @param {FlagMap} fmap */ /** @return {string} */\r\n    'yyyy': (o, fmap) => fmap.y(o),\r\n\r\n    /** @param {FlagMap} fmap */ /** @return {number} */\r\n    'h': (o, fmap) => fmap.H(o) % 12 || 12,\r\n\r\n    /** @param {FlagMap} fmap */ /** @return {string} */\r\n    'hh': (o, fmap) => padLeft(fmap.H(o) % 12 || 12, 2, '0'),\r\n\r\n    /** @param {FlagMap} fmap */ /** @return {string} */\r\n    'H': (o, fmap) => fmap.H(o),\r\n\r\n    /** @param {FlagMap} fmap */ /** @return {string} */\r\n    'HH': (o, fmap) => padLeft(fmap.H(o), 2, '0'),\r\n\r\n    /** @param {FlagMap} fmap */ /** @return {string} */\r\n    'm': (o, fmap) => fmap.m(o),\r\n\r\n    /** @param {FlagMap} fmap */ /** @return {string} */\r\n    'mm': (o, fmap) => padLeft(fmap.m(o), 2, '0'),\r\n\r\n    /** @param {FlagMap} fmap */ /** @return {string} */\r\n    's': (o, fmap) => fmap.s(o),\r\n\r\n    /** @param {FlagMap} fmap */ /** @return {string} */\r\n    'ss': (o, fmap) => padLeft(fmap.s(o), 2, '0'),\r\n\r\n    /** @param {FlagMap} fmap */ /** @return {string} */\r\n    'l': (o, fmap) => padLeft(fmap.L(o), 3, '0'),\r\n\r\n    /** @param {FlagMap} fmap */ /** @return {string} */\r\n    'L': (o, fmap) => {\r\n        const L = fmap.L(o);\r\n        return padLeft(L > 99 ? Math.round(L / 10) : L, 2, '0');\r\n    },\r\n\r\n    /** @param {FlagMap} fmap */ /** @return {string} */\r\n    'f': (o, fmap) => Math.floor(fmap.L(o) / 100).toString(),\r\n\r\n    /** @param {FlagMap} fmap */ /** @return {string} */\r\n    'ff': (o, fmap) => padLeft(Math.floor(fmap.L(o) / 10), 2, '0'),\r\n\r\n    /** @param {FlagMap} fmap */ /** @return {string} */\r\n    'fff': (o, fmap) => padLeft(fmap.L(o), 3, '0'),\r\n\r\n    /** @param {FlagMap} fmap */ /** @return {string} */\r\n    'ffff': (o, fmap) => padLeft(fmap.L(o), 3, '0') + '0',\r\n\r\n    /** @param {FlagMap} fmap */ /** @return {string} */\r\n    'fffff': (o, fmap) => padLeft(fmap.L(o), 3, '0') + '00',\r\n\r\n    /** @param {FlagMap} fmap */ /** @return {string} */\r\n    'ffffff': (o, fmap) => padLeft(fmap.L(o), 3, '0') + '000',\r\n\r\n    /** @param {FlagMap} fmap */ /** @return {string} */\r\n    'fffffff': (o, fmap) => padLeft(fmap.L(o), 3, '0') + '0000',\r\n\r\n    /** @param {FlagMap} fmap */ /** @return {string} */\r\n    'F': (o, fmap) => {\r\n        const v = Math.floor(fmap.L(o) / 100);\r\n        if (v === 0) return '';\r\n        return v.toString();\r\n    },\r\n\r\n    /** @param {FlagMap} fmap */ /** @return {string} */\r\n    'FF': (o, fmap) => {\r\n        const v = Math.floor(fmap.L(o) / 10);\r\n        if (v === 0) return '';\r\n        return padLeft(v, 2, '0');\r\n    },\r\n\r\n    /** @param {FlagMap} fmap */ /** @return {string} */\r\n    'FFF': (o, fmap) => {\r\n        const v = fmap.L(o);\r\n        if (v === 0) return '';\r\n        return padLeft(v, 3, '0');\r\n    },\r\n\r\n    /** @param {FlagMap} fmap */ /** @return {string} */\r\n    'FFFF': (o, fmap) => {\r\n        const v = fmap.L(o);\r\n        if (v === 0) return '';\r\n        return padLeft(v, 3, '0') + '0';\r\n    },\r\n\r\n    /** @param {FlagMap} fmap */ /** @return {string} */\r\n    'FFFFF': (o, fmap) => {\r\n        const v = fmap.L(o);\r\n        if (v === 0) return '';\r\n        return padLeft(v, 3, '0') + '00';\r\n    },\r\n\r\n    /** @param {FlagMap} fmap */ /** @return {string} */\r\n    'FFFFFF': (o, fmap) => {\r\n        const v = fmap.L(o);\r\n        if (v === 0) return '';\r\n        return padLeft(v, 3, '0') + '000';\r\n    },\r\n\r\n    /** @param {FlagMap} fmap */ /** @return {string} */\r\n    'FFFFFFF': (o, fmap) => {\r\n        const v = fmap.L(o);\r\n        if (v === 0) return '';\r\n        return padLeft(v, 3, '0') + '0000';\r\n    },\r\n\r\n    't': (o, fmap, culture) => fmap.H(o) < 12 ?\r\n        culture['am_short_lower'] || 'a' :\r\n        culture['pm_short_lower'] || 'p',\r\n\r\n    'tt': (o, fmap, culture) => fmap.H(o) < 12 ?\r\n        culture['am_lower'] || 'am' :\r\n        culture['am_lower'] || 'pm',\r\n\r\n    'T': (o, fmap, culture) => fmap.H(o) < 12 ?\r\n        culture['am_short_upper'] || 'A' :\r\n        culture['pm_short_upper'] || 'P',\r\n\r\n    'TT': (o, fmap, culture) => fmap.H(o) < 12 ?\r\n        culture['am_upper'] || 'AM' :\r\n        culture['pm_upper'] || 'PM',\r\n\r\n    /** @param {FlagMap} fmap */ /** @return {string} */\r\n    'Z': (o, fmap) => fmap.utc(o),\r\n\r\n    /** @param {FlagMap} fmap */ /** @return {string} */\r\n    'UTC': (o, fmap) => fmap.utcd(o),\r\n\r\n    /** @param {FlagMap} fmap */ /** @return {string} */\r\n    'o': (o, fmap) => {\r\n        o = fmap.o(o);\r\n        return (o > 0 ? \"-\" : \"+\") + padLeft(Math.floor(Math.abs(o) / 60) * 100 + Math.abs(o) % 60, 4, '0')\r\n    },\r\n\r\n    /** @param {FlagMap} fmap */ /** @return {string} */\r\n    'S': (o, fmap) => {\r\n        const d = /**@type number*/fmap.d(o);\r\n        return [\"th\", \"st\", \"nd\", \"rd\"][d % 10 > 3 ? 0 : (d % 100 - d % 10 !== 10) * d % 10]\r\n    }\r\n};\r\n\r\nconst DATE_PARSER_FORMAT_REGEX = /('[^'\\\\]*(?:\\\\.[^'\\\\]*)*')|(\"[^\"\\\\]*(?:\\\\.[^\"\\\\]*)*\")|(\\[[^\\]\\\\]*(?:\\\\.[^\\]\\\\]*)*])|yyyy|yy|MMMM|MMM|MM|M|dddd|ddd|dd|d|HH|H|hh|h|mm|m|ss|s|l|L|f|ff|fff|ffff|fffff|ffffff|fffffff|F|FF|FFF|FFFF|FFFFF|FFFFFF|FFFFFFF|tt|t|TT|T|Z|UTC|o|S|.+?/g;\r\n\r\nconst DATE_PARSER_MAP = {\r\n    'yyyy': (c, s) => s ? '[0-9]{4}' : '[0-9]{2}|[0-9]{4}',\r\n    'yy': () => '[0-9]{2}',\r\n    'MMMM': (c) => arrayToRegex(c['months']),\r\n    'MMM': (c) => arrayToRegex(c['months_short']),\r\n    'MM': (c, s) => s ? '[0-9]{2}' : '[0-9]{1,2}',\r\n    'M': () => '[0-9]{1,2}',\r\n    'dddd': (c) => arrayToRegex(c['days']),\r\n    'ddd': (c) => arrayToRegex(c['days_short']),\r\n    'dd': (c, s) => s ? '[0-9]{2}' : '[0-9]{1,2}',\r\n    'd': () => '[0-9]{1,2}',\r\n    'HH': (c, s) => s ? '[0-9]{2}' : '[0-9]{1,2}',\r\n    'H': () => '[0-9]{1,2}',\r\n    'hh': (c, s) => s ? '[0-9]{2}' : '[0-9]{1,2}',\r\n    'h': () => '[0-9]{1,2}',\r\n    'mm': (c, s) => s ? '[0-9]{2}' : '[0-9]{1,2}',\r\n    'm': () => '[0-9]{1,2}',\r\n    'ss': (c, s) => s ? '[0-9]{2}' : '[0-9]{1,2}',\r\n    's': () => '[0-9]{1,2}',\r\n    'l': () => '[0-9]{3}',\r\n    'L': () => '[0-9]{2}',\r\n    'f': () => '[0-9]{1}',\r\n    'ff': () => '[0-9]{2}',\r\n    'fff': () => '[0-9]{3}',\r\n    'ffff': () => '[0-9]{4}',\r\n    'fffff': () => '[0-9]{5}',\r\n    'ffffff': () => '[0-9]{6}',\r\n    'fffffff': () => '[0-9]{7}',\r\n    'F': () => '[0-9]{0,1}',\r\n    'FF': () => '[0-9]{0,2}',\r\n    'FFF': () => '[0-9]{0,3}',\r\n    'FFFF': () => '[0-9]{0,4}',\r\n    'FFFFF': () => '[0-9]{0,5}',\r\n    'FFFFFF': () => '[0-9]{0,6}',\r\n    'FFFFFFF': () => '[0-9]{0,7}',\r\n    'tt': (c) => {\r\n        const am1 = c['am_lower'] || 'am';\r\n        const pm1 = c['pm_lower'] || 'pm';\r\n        const am2 = c['am_upper'] || 'AM';\r\n        const pm2 = c['pm_upper'] || 'PM';\r\n\r\n        let all = generateAllCasePermutations(am1)\r\n            .concat(generateAllCasePermutations(pm1));\r\n\r\n        if (am1.toLowerCase() !== am2.toLowerCase()) {\r\n            all = all.concat(generateAllCasePermutations(am2));\r\n        }\r\n\r\n        if (pm1.toLowerCase() !== pm2.toLowerCase()) {\r\n            all = all.concat(generateAllCasePermutations(pm2));\r\n        }\r\n\r\n        return arrayToRegex(all);\r\n    },\r\n    't': (c) => {\r\n        const am1 = c['am_short_lower'] || 'a';\r\n        const pm1 = c['pm_short_lower'] || 'p';\r\n        const am2 = c['am_short_upper'] || 'A';\r\n        const pm2 = c['pm_short_upper'] || 'P';\r\n\r\n        let all = generateAllCasePermutations(am1)\r\n            .concat(generateAllCasePermutations(pm1));\r\n\r\n        if (am1.toLowerCase() !== am2.toLowerCase()) {\r\n            all = all.concat(generateAllCasePermutations(am2));\r\n        }\r\n\r\n        if (pm1.toLowerCase() !== pm2.toLowerCase()) {\r\n            all = all.concat(generateAllCasePermutations(pm2));\r\n        }\r\n\r\n        return arrayToRegex(all);\r\n    },\r\n    'TT': (c, s) => DATE_PARSER_MAP['tt'](c, s),\r\n    'T': (c, s) => DATE_PARSER_MAP['t'](c, s),\r\n    'Z': () => 'Z|(?:GMT|UTC)?[+-][0-9]{2,4}(?:\\\\([a-zA-Z ]+ (?:Standard|Daylight|Prevailing) Time\\\\))?',\r\n    'UTC': () => '[+-][0-9]{2,4}',\r\n    'o': () => '[+-][0-9]{4}',\r\n    'S': () => 'th|st|nd|rd'\r\n};\r\n\r\nexport {\r\n    DATE_FORMAT_REGEX,\r\n    DATE_FLAG_SUBMAP_LOCAL,\r\n    DATE_FLAG_SUBMAP_UTC,\r\n    DATE_FLAG_MAP,\r\n    DATE_PARSER_FORMAT_REGEX,\r\n    DATE_PARSER_MAP\r\n};","import {padLeft} from './utils.js';\r\n\r\nconst DEFAULT_DECIMAL_SEPARATOR = (1.1).toLocaleString().substr(1, 1);\r\n\r\nconst DEFAULT_THOUSANDS_SEPARATOR = (1000).toLocaleString().length === 5\r\n    ? (1000).toLocaleString().substr(1, 1)\r\n    : (DEFAULT_DECIMAL_SEPARATOR === ',' ? '.' : ',');\r\n\r\n//const DEFAULT_DECIMAL_SEPARATOR_REGEX = new RegExp('\\\\' + DEFAULT_DECIMAL_SEPARATOR, 'g');\r\n\r\n/**\r\n * This will process value with printf specifier format\r\n * @param {*} value the value to process\r\n * @param {string?} specifiers the printf style specifiers. i.e. '2.5f', 'E', '#x'\r\n * @param {string?} decimalSign the decimal separator character to use\r\n * @param {string?} thousandsSign the thousands separator character to use\r\n * @returns {string}\r\n */\r\nfunction applySpecifiers(value, specifiers, decimalSign, thousandsSign) {\r\n    if (!specifiers) return value;\r\n\r\n    const type = specifiers[specifiers.length - 1];\r\n    specifiers = specifiers.substr(0, specifiers.length - 1);\r\n\r\n    const isNumeric =\r\n        type === 'b' ||\r\n        type === 'c' ||\r\n        type === 'd' ||\r\n        type === 'i' ||\r\n        type === 'e' ||\r\n        type === 'E' ||\r\n        type === 'f' ||\r\n        type === 'g' ||\r\n        type === 'o' ||\r\n        type === 'u' ||\r\n        type === 'x' ||\r\n        type === 'X';\r\n    const isDecimalNumeric =\r\n        type === 'e' ||\r\n        type === 'E' ||\r\n        type === 'f' ||\r\n        type === 'g';\r\n    const isUpperCase =\r\n        type === 'E' ||\r\n        type === 'X';\r\n\r\n    let forceSign, spaceSign, radiiOrDecimalSign, padZero, padCount, hasThousands, precision;\r\n\r\n    if (isNumeric) {\r\n        if (typeof value !== 'number') {\r\n            value = parseInt(value, 10);\r\n        }\r\n        if (type === 'u') {\r\n            value = value >>> 0;\r\n        }\r\n\r\n        const parsedSpecifiers = specifiers.match(/(\\+)?( )?(#)?(0)?([0-9]+)?(,)?(.([0-9]+))?/);\r\n        forceSign = parsedSpecifiers[1] === '+';\r\n        spaceSign = parsedSpecifiers[2] === ' ';\r\n        radiiOrDecimalSign = parsedSpecifiers[3] === '#';\r\n        padZero = parsedSpecifiers[4] === '0';\r\n        padCount = parsedSpecifiers[5] ? parseInt(parsedSpecifiers[5], 10) : 0;\r\n        hasThousands = parsedSpecifiers[6];\r\n        precision = parsedSpecifiers[8];\r\n\r\n        if (precision) {\r\n            precision = parseInt(precision, 10);\r\n        }\r\n\r\n        decimalSign = decimalSign || DEFAULT_DECIMAL_SEPARATOR;\r\n        thousandsSign = thousandsSign || DEFAULT_THOUSANDS_SEPARATOR;\r\n    }\r\n\r\n    if (type === 'b') {\r\n        value = (/**@type number*/value).toString(2);\r\n    } else if (type === 'c') {\r\n        value = String.fromCharCode(value);\r\n    } else if (type === 'd' || type === 'i' || type === 'u') {\r\n        value = (/**@type number*/value).toString();\r\n    } else if (type === 'e' || type === 'E') {\r\n        value = (precision !== undefined\r\n            ? (/**@type number*/value).toExponential(parseInt(precision, 10))\r\n            : (/**@type number*/value).toExponential()).toString();\r\n    } else if (type === 'f') {\r\n        value = (precision !== undefined\r\n            ? parseFloat(value).toFixed(parseInt(precision, 10))\r\n            : parseFloat(value)).toString();\r\n    } else if (type === 'g') {\r\n        value = parseFloat(value).toString();\r\n        if (precision !== undefined) {\r\n            const decimalIdx = value.indexOf('.');\r\n            if (decimalIdx > -1) {\r\n                value = value.substr(0, decimalIdx + (precision > 0 ? 1 : 0) + precision);\r\n            }\r\n        }\r\n    } else if (type === 'o') {\r\n        value = (/**@type number*/value).toString(8);\r\n    } else if (type === 'x' || type === 'X') {\r\n        value = (/**@type number*/value).toString(16);\r\n    } else if (type === 's') {\r\n        value = value.toString();\r\n        if (precision !== undefined) {\r\n            value.substr(0, precision);\r\n        }\r\n    } else {\r\n        value = value.toString();\r\n    }\r\n\r\n    if (type === 'd' || type === 'i' || type === 'u' || type === 'x' || type === 'x' || type === 'X' || type === 'o') {\r\n        if (precision !== undefined) {\r\n            if (precision === 0 && value === '0') {\r\n                value = '';\r\n            } else {\r\n                value = padLeft(value, precision, '0');\r\n            }\r\n        }\r\n    }\r\n\r\n    if (value.length === 0) {\r\n        return value;\r\n    }\r\n\r\n    if (isDecimalNumeric) {\r\n        if (radiiOrDecimalSign && value.indexOf('.') === -1) {\r\n            value += '.';\r\n        }\r\n        value = value.replace(/\\./g, decimalSign);\r\n    }\r\n\r\n    if (isUpperCase) {\r\n        value = value.toUpperCase();\r\n    }\r\n\r\n    if (hasThousands) {\r\n        let decIndex = value.indexOf(decimalSign);\r\n        if (decIndex === -1) {\r\n            decIndex = value.length;\r\n        }\r\n        const signIndex = value.charAt(0) === '-' ? 1 : 0;\r\n        if (decIndex - signIndex > 3) {\r\n            let sepValue = '';\r\n            const major = value.substr(signIndex, decIndex - signIndex);\r\n            let fromIndex = 0, toIndex = major.length % 3;\r\n            while (fromIndex < major.length) {\r\n                if (fromIndex > 0) {\r\n                    sepValue += thousandsSign;\r\n                }\r\n                sepValue += major.substring(fromIndex, toIndex);\r\n                fromIndex = toIndex;\r\n                toIndex = fromIndex + 3;\r\n            }\r\n            value = (signIndex ? '-' : '') + sepValue + value.substr(decIndex);\r\n        }\r\n    }\r\n\r\n    if (isNumeric) {\r\n        const sign = (value.charAt(0) === '-' ? '-' : (forceSign ? '+' : '')) || (spaceSign ? ' ' : '');\r\n\r\n        // Remove the - sign\r\n        if (sign === '-') {\r\n            value = value.substr(1);\r\n        }\r\n\r\n        let radiiSign = '';\r\n\r\n        // Prefix with the radii sign\r\n        if (radiiOrDecimalSign) {\r\n            if (type === 'x' || type === 'X') {\r\n                radiiSign = '0x';\r\n            } else if (type === 'o') {\r\n                radiiSign = '0';\r\n            }\r\n        }\r\n\r\n        // Zero padding - should be like \"0x00005\" for length of 7, where the radii sign is before padding\r\n        if (padCount && padZero) {\r\n            value = padLeft(value, padCount - sign.length - radiiSign.length, '0');\r\n        }\r\n\r\n        value = sign + radiiSign + value;\r\n\r\n        // Space padding - should be like \"    0x5\" for length of 7, where the radii sign is after padding\r\n        if (padCount && !padZero) {\r\n            value = padLeft(value, padCount, ' ');\r\n        }\r\n    }\r\n\r\n    return value;\r\n}\r\n\r\nexport {applySpecifiers};","'use strict';\r\n\r\nimport {extendDotted, regexEscape} from './utils.js';\r\nimport {\r\n    DATE_FORMAT_REGEX,\r\n    DATE_FLAG_SUBMAP_LOCAL,\r\n    DATE_FLAG_SUBMAP_UTC,\r\n    DATE_FLAG_MAP,\r\n    DATE_PARSER_FORMAT_REGEX,\r\n    DATE_PARSER_MAP\r\n} from './date_formats.js';\r\nimport {applySpecifiers} from './printf_specs.js';\r\n\r\n/**\r\n *\r\n * To add a language, call i18n.add('language-code', {translation}, {options})\r\n * Where options takes the following keys:\r\n * \"plural\": function that takes a number, and returns a key suffix for plural form of that count.\r\n * \"decimal\": decimal separator character. The default is auto-detected from the browser locale\r\n * \"thousands\": thousands separator character. The default is auto-detected from the browser locale\r\n *\r\n */\r\n\r\nconst DEFAULT_DECIMAL_SEPARATOR = (1.1).toLocaleString().substr(1, 1);\r\nconst EMPTY_ARRAY = [];\r\n\r\nlet activeLanguage = '';\r\nlet fallbackLanguage = '';\r\nlet active = null;\r\n\r\nconst locs = {}; // Here we will keep i18n objects, each key is a language code\r\nconst originalLocs = {}; // Here we will keep original localizations before using extendLanguage\r\n\r\n/**\r\n * The default plural form specifier.\r\n * This function returns a specifier for plural form, for the specified count.\r\n * @param {Number} count the number that we need to inspect\r\n * @returns {string}\r\n */\r\nconst defaultPlural = function (count) {\r\n    if (count === 0) return 'zero';\r\n    if (count === 1) return 'one';\r\n    return 'plural';\r\n};\r\n\r\n/**\r\n * Encodes the value {value} using the specified {encoding}\r\n * @param {string} value the value to encode\r\n * @param {string} encoding for filters\r\n * @returns {*}\r\n */\r\nconst encodeValue = function (value, encoding) {\r\n    if (encoding === 'html') {\r\n        value = (value == null ? '' : (value + '')).replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\").replace(/'/g, \"&#39;\").replace(/\"/g, \"&quot;\");\r\n    }\r\n    else if (encoding === 'htmll') {\r\n        value = (value == null ? '' : (value + '')).replace(/&/g, \"&amp;\").replace(/</g, \"&lt;\").replace(/>/g, \"&gt;\").replace(/'/g, \"&#39;\").replace(/\"/g, \"&quot;\").replace(/\\n/g, \"<br />\");\r\n    }\r\n    else if (encoding === 'json') {\r\n        value = JSON.stringify(value);\r\n    }\r\n    else if (encoding === 'url') {\r\n        value = encodeURIComponent(value);\r\n    }\r\n    else if (encoding === 'lower') {\r\n        value = (value + '').toLowerCase();\r\n    }\r\n    else if (encoding === 'upper') {\r\n        value = (value + '').toUpperCase();\r\n    }\r\n    else if (encoding === 'upperfirst') {\r\n        value = value + '';\r\n        value = value[0].toUpperCase() + value.substr(1).toLowerCase();\r\n    }\r\n    else if (encoding.substr(0, 7) === 'printf ') {\r\n        const localeOptions = active.options;\r\n        value = applySpecifiers(value, encoding.substr(7), localeOptions.decimal, localeOptions.thousands);\r\n    }\r\n\r\n    return value;\r\n};\r\n\r\n/** @typedef i18n */\r\nconst i18n = {\r\n\r\n    /**\r\n     * Add a language to the localization object\r\n     * @public\r\n     * @param {string} langCode language code\r\n     * @param {Object} data localization object\r\n     * @param {AddLanguageOptions?} options options for this language\r\n     * @returns {i18n} self\r\n     */\r\n    add: function (langCode, data, options) {\r\n        options = options || {};\r\n\r\n        const locOptions = {};\r\n        locOptions.plural = options.plural || defaultPlural;\r\n        locOptions.decimal = options.decimal || DEFAULT_DECIMAL_SEPARATOR;\r\n        locOptions.thousands = options.thousands || (locOptions.decimal === ',' ? '.' : ',');\r\n        locOptions.decimalOrThousandsRegex = new RegExp(\r\n            '(' + regexEscape(locOptions.decimal) +\r\n            ')|(' + regexEscape(locOptions.thousands) + ')', 'g');\r\n\r\n        locs[langCode] = {\r\n            code: langCode,\r\n            data: data,\r\n            options: locOptions\r\n        };\r\n\r\n        if (!activeLanguage) {\r\n            activeLanguage = langCode;\r\n            active = locs[langCode];\r\n        }\r\n\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Get a language object from the localization\r\n     * @public\r\n     * @param {string} lang language code\r\n     * @param {boolean?} tryFallbacks should we try to search in fallback scenarios i.e. 'en' for 'en-US'\r\n     * @returns {{ code: string, data: Object, options: Object }} language object\r\n     */\r\n    getLanguage: function (lang, tryFallbacks) {\r\n        if (tryFallbacks) {\r\n            if (lang === 'iw') lang = 'he'; // Fallback from Google's old spec, if the setting came from an old Android device\r\n            if (!lang) {\r\n                lang = this.getAvailableLanguages()[0];\r\n            }\r\n            let found = null;\r\n            while (typeof lang === 'string') {\r\n                if ((found = locs[lang])) break;\r\n\r\n                let idx = lang.lastIndexOf('-');\r\n\r\n                if (idx < 0)\r\n                    idx = lang.lastIndexOf('_');\r\n\r\n                if (idx > 0)\r\n                    lang = lang.substr(0, idx);\r\n                else break;\r\n            }\r\n\r\n            if (!found) {\r\n                lang = this.getAvailableLanguages()[0];\r\n                found = locs[lang];\r\n            }\r\n\r\n            return found;\r\n        } else {\r\n            return locs[lang];\r\n        }\r\n    },\r\n\r\n    /**\r\n     * Retrieve a i18n value/object\r\n     * Accepted arguments are in the following formats:\r\n     *  (String keypath, [Boolean original], [Object options])\r\n     *  (String key, String key, String key, [Boolean original], [Object options])\r\n     *  (Array keypath, [Boolean original], [Object options])\r\n     *\r\n     * \"keypath\" is the path to the localized value.\r\n     * When the keypath is a String, each part is separated by a period.\r\n     * When the keypath is an Array, each part is a single part in the path.\r\n     *\r\n     * \"original\" specifies whether to access the original language, if the current language was extended. Default is false.\r\n     * \"options\" contains values that can be used in the localization,\r\n     *   and possibly the \"count\" property which is used for plural values,\r\n     *   or the \"gender\" property for selecting a gender from the target value.\r\n     *\r\n     * @public\r\n     * @param {...}\r\n     * @returns {*} localized value or object\r\n     */\r\n    t: function () {\r\n        const args = arguments;\r\n        let argIndex = 0,\r\n            keys,\r\n            useOriginal = false,\r\n            locale,\r\n            tryFallback = true,\r\n            options,\r\n            i,\r\n            len;\r\n\r\n        // Normalize key(s)\r\n        if (typeof args[0] === 'string' && typeof args[1] !== 'string') {\r\n            keys = args[argIndex++];\r\n            if (keys.length === 0) {\r\n                keys = EMPTY_ARRAY;\r\n            } else {\r\n                keys = keys.split('.');\r\n            }\r\n        } else if (typeof args[0] === 'object' && 'length' in args[0]) {\r\n            keys = args[argIndex++];\r\n        } else if (typeof args[0] === 'string' && typeof args[1] === 'string') {\r\n            let arg;\r\n            keys = [];\r\n            for (len = args.length; argIndex < len; argIndex++) {\r\n                arg = args[argIndex];\r\n                if (typeof arg === 'string') {\r\n                    keys.push(arg);\r\n                } else {\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n\r\n        // `useOriginal` argument\r\n        options = args[argIndex++];\r\n        if (typeof options === 'boolean') {\r\n            useOriginal = options;\r\n            options = args[argIndex];\r\n        }\r\n\r\n        // Choose locale\r\n        if (useOriginal) {\r\n            locale = originalLocs[activeLanguage] || active;\r\n        } else {\r\n            locale = active;\r\n        }\r\n\r\n        let loc = locale.data;\r\n\r\n        // If no key is specified, return the root namespace\r\n        if (!keys.length) {\r\n            return loc;\r\n        }\r\n\r\n        // `while` because we might try multiple times,\r\n        // like first try with active locale, second time with fallback locale.\r\n        while (true) {\r\n\r\n            if (options && typeof options['count'] === 'number') { // Try for plural form\r\n\r\n                // Loop on all of them except the last. We are going to test the last key combined with plural specifiers\r\n                for (i = 0, len = keys.length - 1; i < len; i++) {\r\n                    loc = loc[keys[i]];\r\n\r\n                    // Avoid stepping into an undefined. Make systems more stable.\r\n                    // Anyone who queries for an invalid `t(...)` should handle the `undefined` himself.\r\n                    if (loc === undefined) {\r\n                        break;\r\n                    }\r\n                }\r\n\r\n                let pluralSpec = locale.options.plural;\r\n                pluralSpec = pluralSpec(options['count']);\r\n\r\n                const key = keys[keys.length - 1]; // This is the last key in the keys array\r\n\r\n                if (pluralSpec && loc[key + '_' + pluralSpec]) {\r\n                    // We have a match for the plural form\r\n                    loc = loc[key + '_' + pluralSpec];\r\n                } else {\r\n                    // Take the bare one\r\n                    loc = loc[key];\r\n                }\r\n\r\n            } else {\r\n                // No need for the plural form, as no 'count' was specified\r\n\r\n                for (i = 0, len = keys.length; i < len; i++) {\r\n                    loc = loc[keys[i]];\r\n\r\n                    // Avoid stepping into an undefined. Make systems more stable.\r\n                    // Anyone who queries for an invalid `t(...)` should handle the `undefined` himself.\r\n                    if (loc === undefined) {\r\n                        break;\r\n                    }\r\n                }\r\n            }\r\n\r\n            if (loc === undefined &&\r\n                tryFallback &&\r\n                fallbackLanguage &&\r\n                fallbackLanguage !== activeLanguage) {\r\n\r\n                tryFallback = false;\r\n\r\n                if (locs.hasOwnProperty(fallbackLanguage)) {\r\n                    locale = locs[fallbackLanguage];\r\n                    loc = locale.data;\r\n                    continue;\r\n                }\r\n            }\r\n\r\n            break;\r\n        }\r\n\r\n        if (options) {\r\n\r\n            if (typeof options['gender'] === 'string') { // Try for gender form\r\n\r\n                if (typeof loc === 'object' &&\r\n                    !(loc instanceof Array)) {\r\n\r\n                    const gender = options['gender'];\r\n                    let genderized;\r\n\r\n                    // Allow any gender, you can invent new ones...\r\n                    genderized = loc[gender];\r\n\r\n                    if (genderized === undefined) {\r\n\r\n                        // Fallback for male/female to m/f\r\n                        if (gender === 'male') {\r\n                            genderized = loc['m'];\r\n                        } else if (gender === 'female') {\r\n                            genderized = loc['f'];\r\n                        }\r\n\r\n                        // Fallbacks for neutral gender\r\n                        if (genderized === undefined) {\r\n                            genderized = loc['neutral'];\r\n                        }\r\n\r\n                        if (genderized === undefined) {\r\n                            genderized = loc['n'];\r\n                        }\r\n\r\n                        if (genderized === undefined) {\r\n                            genderized = loc[''];\r\n                        }\r\n\r\n                        // Default fallback\r\n\r\n                        if (genderized === undefined) {\r\n                            genderized = loc;\r\n                        }\r\n                    }\r\n\r\n                    loc = genderized;\r\n                }\r\n\r\n            }\r\n        }\r\n\r\n        // Process special value contents based on whether there are `options` provided,\r\n        // or the value contains a special character\r\n        if (options ||\r\n            (typeof loc === 'string' && (loc.indexOf('{') > -1 || loc.indexOf('t(') > -1))) {\r\n            loc = i18n.processLocalizedString(loc, options);\r\n        }\r\n\r\n        return loc;\r\n    },\r\n\r\n    /**\r\n     * Get the decimal seperator for the active locale\r\n     * @public\r\n     * @returns {string} decimal separator\r\n     */\r\n    getDecimalSeparator: function () {\r\n        return active.options.decimal;\r\n    },\r\n\r\n    /**\r\n     * Get the thousands seperator for the active locale\r\n     * @public\r\n     * @returns {string} thousands separator\r\n     */\r\n    getThousandsSeparator: function () {\r\n        return active.options.thousands;\r\n    },\r\n\r\n    /**\r\n     * Set current active language using a language code.\r\n     * The function will fall back from full to two-letter ISO codes (en-US to en) and from bad Android like codes (en_US to en).\r\n     * @public\r\n     * @param {string} lang the language code to use\r\n     * @returns {i18n} self\r\n     */\r\n    setActiveLanguage: function (lang) {\r\n        const found = this.getLanguage(lang, true);\r\n        active = found;\r\n        activeLanguage = found.code;\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Set the language code of the fallback language.\r\n     * By default there's no fallback language, so <code>undefined</code> could be returned when a key is not localized.\r\n     * The function will fall back from full to two-letter ISO codes (en-US to en) and from bad Android like codes (en_US to en).\r\n     * Note: For performance reasons, the fallback happens only if <code>setFallbackLanguage(...)</code> is called when all languages are already added. Otherwise, the specified language code is used as it is.\r\n     * @public\r\n     * @param {string} lang the language code to use\r\n     * @returns {i18n} self\r\n     */\r\n    setFallbackLanguage: function (lang) {\r\n        const found = this.getLanguage(lang, true);\r\n        fallbackLanguage = found ? found.code : lang;\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Set current active language using a language code found in the document's lang attribute or a relevant meta tag.\r\n     * Calls setActiveLanguage to do the dirty work after detecting language code.\r\n     * @public\r\n     * @returns {i18n} self\r\n     */\r\n    setActiveLanguageFromMetaTag: function () {\r\n        let lang = document.documentElement.getAttribute('lang') || document.documentElement.getAttribute('xml:lang');\r\n        if (!lang) {\r\n            const metas = document.getElementsByTagName('meta');\r\n            let i = 0, meta;\r\n            for (; i < metas.length; i++) {\r\n                meta = metas[i];\r\n                if ((meta.getAttribute('http-equiv') || '').toLowerCase() === 'content-language') {\r\n                    lang = meta.getAttribute('content');\r\n                    break;\r\n                }\r\n            }\r\n        }\r\n        return this.setActiveLanguage(lang);\r\n    },\r\n\r\n    /**\r\n     * Get the current active language code.\r\n     * @public\r\n     * @returns {string} current active language code\r\n     */\r\n    getActiveLanguage: function () {\r\n        return activeLanguage;\r\n    },\r\n\r\n    /**\r\n     * Get an array of the available language codes\r\n     * @public\r\n     * @returns {string[]} array of the available language codes\r\n     */\r\n    getAvailableLanguages: function () {\r\n        const langs = [];\r\n        for (let key in locs) {\r\n            if (!locs.hasOwnProperty(key)) continue;\r\n            langs.push(key);\r\n        }\r\n        return langs;\r\n    },\r\n\r\n    /**\r\n     * Extend a specific language with data from a localized object.\r\n     * In order to allow easy storage and retrieval of extensions from DBs, the extension data is built with\r\n     *   dotted syntax instead of a hieararchy of objects. i.e {\"parent.child\": \"value\"}\r\n     * @public\r\n     * @param {string} lang language code\r\n     * @param {Object} data localization object\r\n     * @returns {i18n} self\r\n     */\r\n    extendLanguage: function (lang, data) {\r\n        try {\r\n            if (locs[lang]) {\r\n                if (!originalLocs[lang]) { // Back it up first\r\n                    originalLocs[lang] = JSON.parse(JSON.stringify(locs[lang]));\r\n                }\r\n                extendDotted(locs[lang].data, data);\r\n            }\r\n        } catch (e) { }\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Extend the entire languages array, with the help of the extendLanguage function.\r\n     * @public\r\n     * @param {Object} data the localization extension object. each language as the key and extension object as the value.\r\n     * @returns {i18n} self\r\n     */\r\n    extendLanguages: function (data) {\r\n        try {\r\n            for (let lang in data) {\r\n                if (!data.hasOwnProperty(lang)) continue;\r\n                if (locs[lang]) {\r\n                    if (!originalLocs[lang]) { // Back it up first\r\n                        originalLocs[lang] = JSON.parse(JSON.stringify(locs[lang]));\r\n                    }\r\n                    extendDotted(locs[lang].data, data[lang]);\r\n                }\r\n            }\r\n        } catch (e) { }\r\n        return this;\r\n    },\r\n\r\n    /**\r\n     * Retrieve a localized string of a physical file size, assuming that the \"size_abbrs\" key is available.\r\n     * @public\r\n     * @param {number} bytes the number of bytes\r\n     * @returns {LocalizedPhysicalFileSize} localized size\r\n     */\r\n    physicalSize: function (bytes) {\r\n        let ret;\r\n        const loc = i18n.t('size_abbrs');\r\n        if (bytes < 100) ret = {size: bytes, name: loc['b']};\r\n        else if (bytes < 101376) ret = {size: bytes / 1024.0, name: loc['kb']};\r\n        else if (bytes < 103809024) ret = {size: bytes / 1024.0 / 1024.0, name: loc['mb']};\r\n        else if (bytes < 106300440576) ret = {size: bytes / 1024.0 / 1024.0 / 1024.0, name: loc['gb']};\r\n        else ret = {size: bytes / 1024.0 / 1024.0 / 1024.0 / 1024.0, name: loc['tb']};\r\n        ret.size = (Math.ceil(ret.size * 100) / 100); // Max two decimal points\r\n        return ret;\r\n    },\r\n\r\n    /**\r\n     * Format a date to a localized string, assuming that the \"calendar\" key is available.\r\n     * Supports all formatting codes known to humanity.\r\n     * @public\r\n     * @param {Date|string|number} date The date to format\r\n     * @param {string} format The format\r\n     * @param {string|Object|null|?} culture Can accept a culture code, a culture object,\r\n     *                                       or a simple \"calendar\" object which contains the keys \"months\", \"months_short\", \"days\" and \"days_short\"\r\n     * @returns {string} A localized date\r\n     */\r\n    formatDate: function (date, format, culture) {\r\n\r\n        if (culture && typeof culture === 'string') {\r\n            culture = i18n.getLanguage(culture, true);\r\n\r\n            if (culture) {\r\n                culture = culture['calendar'];\r\n            }\r\n        }\r\n\r\n        culture = culture || i18n.t('calendar') || {};\r\n\r\n        // Passing date through Date applies Date.parse, if necessary\r\n        if (date == null) {\r\n            date = new Date();\r\n        } else if (typeof date === 'string') {\r\n            date = i18n.parseDate(date, null, culture);\r\n        } else if (date instanceof Date) {\r\n            // date = new Date(date);\r\n        } else if (typeof date === 'number') {\r\n            date = new Date(date);\r\n        } else {\r\n            date = NaN;\r\n        }\r\n\r\n        if (isNaN(date)) throw new SyntaxError(\"invalid date\");\r\n\r\n        let utc = false;\r\n\r\n        if (!format) {\r\n            format = 'yyyy-MM-dd'; // ISO\r\n        }\r\n\r\n        // Allow setting the utc argument via the a special UTC: specifier\r\n        if (format.substr(0, 4) === 'UTC:') {\r\n            utc = true;\r\n            format = format.slice(4);\r\n        }\r\n\r\n        // Allow setting the utc argument via the Z specifier\r\n        if (format.charAt(format.length - 1) === 'Z') {\r\n            utc = true;\r\n        }\r\n\r\n        const f = utc ? DATE_FLAG_SUBMAP_UTC : DATE_FLAG_SUBMAP_LOCAL;\r\n\r\n        return format.replace(\r\n            DATE_FORMAT_REGEX,\r\n                token => (token in DATE_FLAG_MAP)\r\n                    ? (DATE_FLAG_MAP[token])(date, f, culture)\r\n                    : token.slice(1, token.length - 1)\r\n        );\r\n    },\r\n\r\n    /**\r\n     * Parses a date from user input, based on a supplied format. This is the counterpart of the formatDate function.\r\n     * Supports all formatting codes known to humanity.\r\n     * Will automatically fall back if missing a digit i.e 1/2/34 for dd/MM/yyyy, unless `strict` is specified.\r\n     * Forgiving behavior with \"incorrect\" separators, i.e 01.05 instead of 01/05, unless `strict` is specified.\r\n     * If year is missing, it will default to current year. Anything else will default to zero.\r\n     *\r\n     * This function actually uses the `createDateParser(...)` function, and caches the result.\r\n     * @public\r\n     * @expose\r\n     * @param {string} date The date to parse\r\n     * @param {string?} format The format. Defaults to UTC ISO. (yyyy-MM-DD'T'HH:mm:ssZ)\r\n     * @param {string|Object|null|?} culture Can accept a culture code, a culture object,\r\n     *                                       or a simple \"calendar\" object which contains the keys \"months\", \"months_short\", \"days\" and \"days_short\"\r\n     * @param {boolean?} strict Should the parser be strict? false by default, forgiving missing digits etc.\r\n     * @returns {Date} The parsed date\r\n     */\r\n    parseDate: function (date, format, culture, strict) {\r\n\r\n        if (culture && typeof culture === 'string') {\r\n            culture = i18n.getLanguage(culture, true);\r\n\r\n            if (culture) {\r\n                culture = culture['calendar'];\r\n            }\r\n        }\r\n\r\n        culture = culture || i18n.t('calendar') || {};\r\n\r\n        if (!format) {\r\n            if ('parse' in Date) {\r\n                return new Date(date);\r\n            } else {\r\n                let parsed = this.parseDate(date, 'yyyy-MM-dd\\'T\\'HH:mm:ss[.FFFFFFF]Z', culture, true);\r\n                if (isNaN(+parsed)) parsed = this.parseDate(date, 'yyyy-MM-dd', culture, true);\r\n                if (isNaN(+parsed)) parsed = this.parseDate(date, 'ddd, dd, MMM yyyy HH:mm:ss Z', culture, true);\r\n                if (isNaN(+parsed)) parsed = this.parseDate(date, 'dddd, dd-MMM-yy HH:mm:ss Z', culture, true);\r\n                if (isNaN(+parsed)) parsed = this.parseDate(date, 'ddd MMM d HH:mm:ss yyyy', culture, true);\r\n                return parsed;\r\n            }\r\n        }\r\n\r\n        let compiled = culture[strict ? '_compiledParsersE' : '_compiledParsers'];\r\n        if (!compiled) {\r\n            culture[strict ? '_compiledParsersE' : '_compiledParsers'] = compiled = {};\r\n        }\r\n\r\n        if (!compiled[format]) {\r\n            compiled[format] = i18n.createDateParser(format, culture, strict);\r\n        }\r\n\r\n        return compiled[format](date, culture);\r\n    },\r\n\r\n    /**\r\n     * Creates a date parser. This is generally used (and cached) by `parseDate(...)`.\r\n     * Supports all formatting codes known to humanity.\r\n     * Will automatically fall back if missing a digit i.e 1/2/34 for dd/MM/yyyy, unless `strict` is specified.\r\n     * Forgiving behavior with \"incorrect\" separators, i.e 01.05 instead of 01/05, unless `strict` is specified.\r\n     * If year is missing, it will default to current year. Anything else will default to zero.\r\n     * @public\r\n     * @expose\r\n     * @param {string} format The format\r\n     * @param {Object} culture An object which contains the keys \"months\", \"months_short\", \"days\" and \"days_short\"\r\n     * @param {boolean} strict Should the parser be strict? false by default, forgiving missing digits etc.\r\n     * @returns {function(string):Date} The parser function\r\n     */\r\n    createDateParser: function (format, culture, strict) {\r\n\r\n        let regex = '';\r\n        const regexParts = [];\r\n\r\n        const processFormat = format => {\r\n            const formatParts = format.match(DATE_PARSER_FORMAT_REGEX);\r\n\r\n            let i, count, part, shouldStrict;\r\n\r\n            // Remove all empty groups\r\n            for (i = 0, count = formatParts.length; i < count; i++) {\r\n                if (formatParts[i].length === 0 || formatParts[i] === '[]') {\r\n                    formatParts.splice(i, 1);\r\n                    i--;\r\n                    count--;\r\n                }\r\n            }\r\n\r\n            // Go over all parts in the format, and create the parser regex part by part\r\n            for (i = 0, count = formatParts.length; i < count; i++) {\r\n                part = formatParts[i];\r\n                if (part[0] === '[' && part[part.length - 1] === ']') {\r\n                    regex += '(?:';\r\n                    processFormat(part.substr(1, part.length - 2));\r\n                    regex += ')?';\r\n                } else if (DATE_PARSER_MAP.hasOwnProperty(part)) {\r\n                    // An actually recognized part\r\n                    shouldStrict = strict || // We are specifically instructed to use strict mode\r\n                        (i > 0 && DATE_PARSER_MAP.hasOwnProperty(formatParts[i - 1])) || // Previous part is not some kind of a boundary\r\n                        (i < count - 1 && DATE_PARSER_MAP.hasOwnProperty(formatParts[i + 1])); // Next part is not some kind of a boundary\r\n\r\n                    regex += '(' + DATE_PARSER_MAP[part](culture, shouldStrict) + ')';\r\n                    regexParts.push(part);\r\n                } else {\r\n                    // A free text node\r\n\r\n                    // Remove enclosing quotes if there are...\r\n                    if (part[0] === \"'\") {\r\n                        part = part.replace(/'([^'\\\\]*(?:\\\\.[^'\\\\]*)*)'/, '$1');\r\n                    } else if (part[0] === '\"') {\r\n                        part = part.replace(/\"([^\"\\\\]*(?:\\\\.[^\"\\\\]*)*)\"/, '$1');\r\n                    }\r\n\r\n                    part = part.replace(/\\\\\\\\/g, '\\\\'); // Unescape\r\n                    if (!strict && (part === '/' || part === '.' || part === '-')) {\r\n                        regex += '([/\\\\.-])';\r\n                    } else {\r\n                        regex += '(' + regexEscape(part) + ')';\r\n                    }\r\n                    regexParts.push('');\r\n                }\r\n            }\r\n        };\r\n\r\n        processFormat(format);\r\n\r\n        regex = new RegExp('^' + regex + '$');\r\n\r\n        // This is for calculating which side to go for 2 digit years\r\n        const baseYear = Math.floor((new Date()).getFullYear() / 100) * 100;\r\n\r\n        // Return a parser function\r\n        return date => {\r\n            date = date + '';\r\n            const parts = date.match(regex);\r\n            if (!parts) return null;\r\n\r\n            parts.splice(0, 1); // Remove main capture group 0\r\n\r\n            const now = new Date(),\r\n                nowYear = now.getFullYear();\r\n            let year = null, month = null, day = null,\r\n                hours = null, hours12 = false, hoursTT, minutes = null,\r\n                seconds = null, milliseconds = null,\r\n                timezone = null;\r\n\r\n            let i = 0;\r\n            const len = parts.length;\r\n            let part, tmp;\r\n            for (; i < len; i++) {\r\n                part = parts[i];\r\n                switch (regexParts[i]) {\r\n                    case 'yyyy':\r\n                    case 'yy':\r\n                        year = parseInt(part, 10);\r\n                        if (year < 100) {\r\n                            year += baseYear;\r\n                            if (year - nowYear > 50) {\r\n                                year -= 100;\r\n                            } else if (nowYear - year > 50) {\r\n                                year += 100;\r\n                            }\r\n                        }\r\n                        break;\r\n\r\n                    case 'MMMM':\r\n                        tmp = culture['months'].indexOf(part);\r\n                        if (tmp > -1) month = tmp;\r\n                        break;\r\n\r\n                    case 'MMM':\r\n                        tmp = culture['months_short'].indexOf(part);\r\n                        if (tmp > -1) month = tmp;\r\n                        break;\r\n\r\n                    case 'MM':\r\n                    case 'M':\r\n                        month = parseInt(part, 10) - 1;\r\n                        break;\r\n\r\n                    case 'dddd':\r\n                        tmp = culture['days'].indexOf(part);\r\n                        if (tmp > -1) day = tmp;\r\n                        break;\r\n\r\n                    case 'ddd':\r\n                        tmp = culture['days_short'].indexOf(part);\r\n                        if (tmp > -1) day = tmp;\r\n                        break;\r\n\r\n                    case 'dd':\r\n                    case 'd':\r\n                        day = parseInt(part, 10);\r\n                        break;\r\n\r\n                    case 'HH':\r\n                    case 'H':\r\n                        hours = parseInt(part, 10);\r\n                        hours12 = false;\r\n                        break;\r\n\r\n                    case 'hh':\r\n                    case 'h':\r\n                        hours = parseInt(part, 10);\r\n                        hours12 = true;\r\n                        break;\r\n\r\n                    case 'mm':\r\n                    case 'm':\r\n                        minutes = parseInt(part, 10);\r\n                        break;\r\n\r\n                    case 'ss':\r\n                    case 's':\r\n                        seconds = parseInt(part, 10);\r\n                        break;\r\n\r\n                    case 'l':\r\n                        milliseconds = parseInt(part, 10);\r\n                        break;\r\n\r\n                    case 'L':\r\n                        milliseconds = parseInt(part, 10);\r\n                        if (milliseconds < 10) {\r\n                            milliseconds *= 100;\r\n                        } else {\r\n                            milliseconds *= 10;\r\n                        }\r\n                        break;\r\n\r\n                    case 'f':\r\n                    case 'ff':\r\n                    case 'fff':\r\n                    case 'ffff':\r\n                    case 'fffff':\r\n                    case 'ffffff':\r\n                    case 'fffffff':\r\n                    case 'F':\r\n                    case 'FF':\r\n                    case 'FFF':\r\n                    case 'FFFF':\r\n                    case 'FFFFF':\r\n                    case 'FFFFFF':\r\n                    case 'FFFFFFF':\r\n                        if (part.length > 3) {\r\n                            part = part.substr(0, 3) + '.' + part.substr(3);\r\n                        } else if (part.length < 3) {\r\n                            while (part.length < 3) {\r\n                                part += '0';\r\n                            }\r\n                        }\r\n                        milliseconds = parseFloat(part);\r\n                        break;\r\n\r\n                    case 'tt':\r\n                    case 't':\r\n                    case 'TT':\r\n                    case 'T':\r\n                        if (hours12) {\r\n                            hoursTT = part.toLowerCase();\r\n                        }\r\n                        break;\r\n\r\n                    case 'Z':\r\n                    case 'UTC':\r\n                    case 'o':\r\n                        const tz = part.match(/(Z)|(?:GMT|UTC)?([+-][0-9]{2,4})(?:\\([a-zA-Z ]+ (?:Standard|Daylight|Prevailing) Time\\))?/);\r\n                        if (tz[1] === 'Z') {\r\n                            timezone = 0;\r\n                        } else if (tz[2]) {\r\n                            timezone = (parseInt(tz[2].substr(1, 2), 10) || 0) * 60 + (parseInt(tz[2].substr(3), 10) || 0);\r\n                            if (tz[2].charAt(0) === '-') {\r\n                                timezone = -timezone;\r\n                            }\r\n                        }\r\n                        break;\r\n                }\r\n            }\r\n\r\n            if (year === null) year = now.getFullYear();\r\n            if (month === null) month = now.getMonth();\r\n            if (day === null) day = 1;\r\n            if (hours12) {\r\n                if (hoursTT === (culture['am_lower'] || 'am').toLowerCase() ||\r\n                    hoursTT === (culture['am_short_lower'] || 'a').toLowerCase()) {\r\n                    if (hours === 12) hours = 0;\r\n                } else if (hoursTT === (culture['pm_lower'] || 'pm').toLowerCase() ||\r\n                    hoursTT === (culture['pm_short_lower'] || 'p').toLowerCase()) {\r\n                    if (hours < 12) hours += 12;\r\n                }\r\n            }\r\n            const parsedDate = new Date(year, month, day, hours || 0, minutes || 0, seconds || 0, milliseconds || 0);\r\n            if (timezone !== null) {\r\n                timezone += parsedDate.getTimezoneOffset();\r\n            }\r\n            parsedDate.setMinutes(parsedDate.getMinutes() - timezone);\r\n\r\n            return parsedDate;\r\n        };\r\n    },\r\n\r\n    /**\r\n     * Try to detect, based on the browser's localization, which is the short date format appropriate.\r\n     * So allegedly, a US user will have MM/dd/yyyy and GB will have d/MM/yyyy.\r\n     * Currently browsers do not seem to behave and use the correct formats of the OS!\r\n     * @public\r\n     * @expose\r\n     * @param {string} fallback a fallback date for a case where the browser does not support this functionality.\r\n     * @returns {string} the detected format, the fallback, or dd/MM/yyyy as default.\r\n     */\r\n    detectShortDateFormat: function (fallback) {\r\n        if (!Date.prototype.toLocaleDateString) return fallback || 'dd/MM/yyyy';\r\n\r\n        return new Date(2013, 1, 1).toLocaleDateString()\r\n            .replace(/\\b2013\\b/, 'yyyy').replace(/\\b13\\b/, 'yy')\r\n            .replace(/\\b02\\b/, 'MM').replace(/\\b2\\b/, 'M')\r\n            .replace(/\\b01\\b/, 'dd').replace(/\\b1\\b/, 'd');\r\n    },\r\n\r\n    /**\r\n     * Format a number for display using the correct decimal separator detected from the browser.\r\n     * @public\r\n     * @expose\r\n     * @param {number|null} value the value to format.\r\n     * @param {boolean=} thousands should we add a thousands separator\r\n     * @returns {string} The formatted number as string.\r\n     *                   If null or empty string is supplied, then an empty string is returned.\r\n     *                   If anything other than a `Number` was supplied, it is only processed by calling `.toLocaleString()`.\r\n     */\r\n    displayNumber: function (value, thousands) {\r\n        if (value === null || value === undefined) return '';\r\n\r\n        if (typeof value === 'number') {\r\n            value = value.toString();\r\n            return i18n.formatRawNumberStringForDisplay(value, thousands);\r\n        }\r\n\r\n        return value.toLocaleString();\r\n    },\r\n\r\n    /**\r\n     * Format a stringified number for display using the correct decimal separator detected from the browser.\r\n     * @public\r\n     * @expose\r\n     * @param {string} value the value to format.\r\n     * @param {boolean=} thousands should we add a thousands separator\r\n     * @returns {string} The formatted number as string.\r\n     */\r\n    formatRawNumberStringForDisplay: function (value, thousands) {\r\n        if (value === '') return '';\r\n\r\n        const decimalSep = active.options.decimal,\r\n            thousandsSep = active.options.thousands;\r\n\r\n        if (decimalSep !== '.') {\r\n            value = value.replace(/\\./g, decimalSep);\r\n        }\r\n        if (thousands) {\r\n            let decIndex = value.indexOf(decimalSep);\r\n            if (decIndex === -1) {\r\n                decIndex = value.length;\r\n            }\r\n            const sign = value.charAt(0) === '-' ? 1 : 0;\r\n            if (decIndex - sign > 3) {\r\n                let sepValue = '';\r\n                const major = value.substr(sign, decIndex - sign);\r\n                let fromIndex = 0, toIndex = major.length % 3;\r\n                while (fromIndex < major.length) {\r\n                    if (fromIndex > 0) {\r\n                        sepValue += thousandsSep;\r\n                    }\r\n                    sepValue += major.substring(fromIndex, toIndex);\r\n                    fromIndex = toIndex;\r\n                    toIndex = fromIndex + 3;\r\n                }\r\n                value = (sign ? '-' : '') + sepValue + value.substr(decIndex);\r\n            }\r\n        }\r\n\r\n        return value;\r\n    },\r\n\r\n    /**\r\n     * Parses a number from user input using the correct decimal separator detected from the browser.\r\n     *\r\n     * By default it will behave like `parseFloat`, where thousands separators are not supported.\r\n     * If `thousands` is `true`, then it will allow parsing with the separator.\r\n     * @public\r\n     * @expose\r\n     * @param {number|string|null} value the value to parse.\r\n     * @param {boolean?} [thousands=false] - Don't break when there are thousands separators in the value\r\n     * @returns {number|null} The parsed number.\r\n     *                   If null or empty string is supplied, then null is returned.\r\n     *                   If a number was supplied, it is returned as-is.\r\n     */\r\n    parseNumber: function (value, thousands) {\r\n        if (value === '' || value == null) return null;\r\n\r\n        if (typeof value !== 'number') {\r\n            return parseFloat(\r\n                value.replace(active.options.decimalOrThousandsRegex, function (g0, dec, tho) {\r\n                    if (dec) return '.';\r\n                    if (tho) return thousands ? '' : ',';\r\n                    return g0;\r\n                })\r\n            );\r\n        }\r\n\r\n        return value;\r\n    },\r\n\r\n    /**\r\n     * Process a localized string.\r\n     *\r\n     * Pass 1:\r\n     *      Look for localization value specified in the form of:\r\n     *          {key.subkey}\r\n     *          {key.subkey|filter|filter...}\r\n     *\r\n     *      Possible filters are:\r\n     *          html\r\n     *          htmll - multiline HTML. replaces \\n with <br />\r\n     *          json\r\n     *          url\r\n     *          lower\r\n     *          upper\r\n     *          upperfirst\r\n     *          printf [print-specifier]\r\n     *\r\n     *      * `printf-specifier`s are C-style format specifiers. i.e. 2.5f\r\n     *      * The i18n keys will receive the `data` passed to `processLocalizedString`\r\n     *\r\n     *      And for placeholders from the passed options, in the form of:\r\n     *          {{count}}\r\n     *          {{data.value|filter|filter...}}\r\n     *\r\n     *          etc.\r\n     *\r\n     * Pass 2:\r\n     *      Look for i18n calls in the form of:\r\n     *          t(\"key.path\") t('key.path') t(key.path) or t(\"key.path\", {\"count\": 5})\r\n     *      Where the options part must be a valid JSON\r\n     *      This stage is affected by previous stages (i.e placeholders can be JSON encoded for t(...) calls\r\n     *\r\n     * localization format is {key.path[|filter][|filter]}\r\n     * Placeholder format is {{key.path[|filter][|filter]}}\r\n     *\r\n     * Printf specifiers are in this order:\r\n     *\r\n     *  \"[+][ ][#][0][width][,][.precision]\" and then one of [bcdieEfgouxXs]\r\n     *\r\n     * +            : Forces to precede the result with a plus or minus sign (+ or -) even for positive numbers.\r\n     * (space)      : If no sign is going to be written, a blank space is inserted before the value.\r\n     * #            : For o, x or X specifiers the value is prefixed with 0, 0x or 0X respectively for values different than zero.\r\n     *                For with e, E, f, g it forces the written output to contain a decimal point even if no more digits follow\r\n     * 0            : Left-pads the number with zeroes (0) instead of spaces when padding is specified\r\n     * (width)      : Minimum number of characters to be printed, left-padded with spaces or zeroes.\r\n     *                If shorter than the number, then the number is not truncated.\r\n     * ,            : For d, i, u, f, g specifiers, adds thousand grouping characters\r\n     * (precision)  : For integer specifiers (d, i, u, o, x, X) - specifies the minimum number of digits to be written. Does not truncate, except for 0.\r\n     *                For e, E, f specifiers: this is the number of digits to be printed after the decimal point\r\n     *                For g specifier: This is the maximum number of significant digits to be printed.\r\n     *                For s: this is the maximum number of characters to be printed\r\n     *\r\n     * @param {string} value - the value to process\r\n     * @param {Object?} data - the data for post processing. Passed to {...} specifiers too.\r\n     * @returns {string} the processed value\r\n     */\r\n    processLocalizedString: function (value, data) {\r\n\r\n        if (typeof value !== 'string') return value;\r\n\r\n        value = value.replace(/(\\\\*)(\\{{1,2})([^|{}\"]+)((?:\\|[^|{}]+)*?)(}{1,2})/g, function () {\r\n\r\n            const precedingBackslahes = arguments[1];\r\n            const openingBrackets = arguments[2];\r\n            const closingBrackets = arguments[5];\r\n\r\n            if ((precedingBackslahes.length & 1) === 1) {\r\n                return arguments[0].substr(precedingBackslahes.length - (precedingBackslahes.length - 1) / 2);\r\n            }\r\n\r\n            if (openingBrackets.length > closingBrackets.length) {\r\n                return arguments[0];\r\n            }\r\n\r\n            let value;\r\n            const key = arguments[3];\r\n            let i, len;\r\n\r\n            let filters = arguments[4];\r\n            if (filters) {\r\n                filters = filters.length > 0 ? filters.split('|') : EMPTY_ARRAY;\r\n                \r\n                // Remove first | split (always empty) so gender could be quickly matched\r\n                while (filters[0] === '')\r\n                    filters.shift();\r\n            }\r\n\r\n            if (openingBrackets.length === 1) {\r\n\r\n                /** @type string|null */\r\n                let gender = null;\r\n                if (filters && filters[0][0] === 'g' && filters[0][1] === ':') {\r\n                    gender = i18n.t(filters[0].substr(2));\r\n\r\n                    if (gender === 'male') {\r\n                        gender = 'm';\r\n                    } else if (gender === 'female') {\r\n                        gender = 'f';\r\n                    }\r\n                }\r\n\r\n                if (gender !== null) {\r\n                    value = i18n.t(key + '.' + gender);\r\n                    if (value === undefined) value = i18n.t(key + '.neutral');\r\n                    if (value === undefined) value = i18n.t(key + '.');\r\n                    if (value === undefined) value = i18n.t(key + '.m');\r\n                    if (value === undefined) value = i18n.t(key + '.f');\r\n                } else {\r\n                    value = i18n.t(key, data);\r\n                }\r\n\r\n            } else {\r\n\r\n                const keys = key.split('.');\r\n                value = data;\r\n                for (i = 0, len = keys.length; i < len && value; i++) {\r\n                    value = value[keys[i]];\r\n                }\r\n                if (value == null) {\r\n                    value = '';\r\n                }\r\n\r\n            }\r\n\r\n            for (i = 0, len = filters.length; i < len; i++) {\r\n                if (filters[i].length === 0) continue;\r\n                value = encodeValue(value, filters[i]);\r\n            }\r\n\r\n            if (closingBrackets.length > openingBrackets.length) {\r\n                value = value + closingBrackets.substr(openingBrackets.length);\r\n            }\r\n\r\n            return (precedingBackslahes.length ?\r\n                precedingBackslahes.substr(precedingBackslahes.length / 2) :\r\n                '') + value;\r\n        });\r\n\r\n        value = value.replace(/t\\((\"[^\"]+?\"|'[^']+?'|[^,)]+?)(?:,\\s*(\\{.*?}))?\\)/g, function () {\r\n\r\n            let key = arguments[1],\r\n                options = arguments[2];\r\n            try {\r\n                key = JSON.parse(key);\r\n            } catch (e) {\r\n                return arguments[0];\r\n            }\r\n            if (options) {\r\n                try {\r\n                    options = JSON.parse(options);\r\n                } catch (e) {\r\n                    options = null;\r\n                }\r\n            }\r\n\r\n            return i18n.t(key, options);\r\n\r\n        });\r\n\r\n        return value;\r\n\r\n    }\r\n\r\n};\r\n\r\n/**\r\n * @typedef {Object} LocalizedPhysicalFileSize\r\n * @property {number} size\r\n * @property {string} name\r\n * */\r\n/** */\r\n\r\n/**\r\n * This function returns a key suffix for plural form, for the specified count.\r\n * @typedef {function(count:number):string} PluralFormFunction\r\n * @param {number} count the number that we need to inspect\r\n * @returns {string}\r\n * */\r\n/** */\r\n\r\n/**\r\n * @typedef {Object} AddLanguageOptions\r\n * @property {PluralFormFunction} plural - function that takes a number, and returns a key suffix for plural form of that count.\r\n * @property {string} [decimal='.'] - decimal separator character. The default is auto-detected from the browser locale\r\n * @property {string} [thousands=','] - thousands separator character. The default is auto-detected from the browser locale\r\n * */\r\n/** */\r\n\r\nexport default i18n;\r\n"],"names":["extendDotted","target","data","dotted","targetDotted","i","key","hasOwnProperty","split","length","ESCAPE_REGEX","regexEscape","string","replace","arrayToRegex","array","regex","padLeft","value","ch","toString","recurse","results","lower","upper","hasCase","pre","len","currenLen","push","generateAllCasePermutations","text","toLowerCase","toUpperCase","DATE_FORMAT_REGEX","DATE_TIMEZONE_REGEX","DATE_TIMEZONE_CLIP_REGEX","DATE_FLAG_SUBMAP_LOCAL","d","getDate","getDay","getMonth","getFullYear","getHours","getMinutes","getSeconds","getMilliseconds","match","pop","z","getTimezoneOffset","s","zm","DATE_FLAG_SUBMAP_UTC","getUTCDate","getUTCDay","getUTCMonth","getUTCFullYear","getUTCHours","getUTCMinutes","getUTCSeconds","getUTCMilliseconds","DATE_FLAG_MAP","o","fmap","culture","D","M","String","y","slice","H","m","L","Math","round","floor","v","utc","utcd","abs","DATE_PARSER_FORMAT_REGEX","DATE_PARSER_MAP","c","am1","pm1","am2","pm2","all","concat","DEFAULT_DECIMAL_SEPARATOR","toLocaleString","substr","DEFAULT_THOUSANDS_SEPARATOR","applySpecifiers","specifiers","decimalSign","thousandsSign","type","isNumeric","isDecimalNumeric","isUpperCase","forceSign","spaceSign","radiiOrDecimalSign","padZero","padCount","hasThousands","precision","parseInt","parsedSpecifiers","fromCharCode","undefined","toExponential","parseFloat","toFixed","decimalIdx","indexOf","decIndex","signIndex","charAt","sepValue","major","fromIndex","toIndex","substring","sign","radiiSign","EMPTY_ARRAY","activeLanguage","fallbackLanguage","active","locs","originalLocs","defaultPlural","count","encodeValue","encoding","JSON","stringify","encodeURIComponent","localeOptions","options","decimal","thousands","i18n","add","langCode","locOptions","plural","decimalOrThousandsRegex","RegExp","code","getLanguage","lang","tryFallbacks","getAvailableLanguages","found","idx","lastIndexOf","t","args","arguments","argIndex","keys","useOriginal","locale","tryFallback","arg","loc","pluralSpec","Array","gender","genderized","processLocalizedString","getDecimalSeparator","getThousandsSeparator","setActiveLanguage","setFallbackLanguage","setActiveLanguageFromMetaTag","document","documentElement","getAttribute","metas","getElementsByTagName","meta","getActiveLanguage","langs","extendLanguage","parse","e","extendLanguages","physicalSize","bytes","ret","size","name","ceil","formatDate","date","format","Date","parseDate","NaN","isNaN","SyntaxError","f","token","strict","parsed","compiled","createDateParser","regexParts","processFormat","formatParts","part","shouldStrict","splice","baseYear","parts","now","nowYear","year","month","day","hours","hours12","hoursTT","minutes","seconds","milliseconds","timezone","tmp","tz","parsedDate","setMinutes","detectShortDateFormat","fallback","prototype","toLocaleDateString","displayNumber","formatRawNumberStringForDisplay","decimalSep","thousandsSep","parseNumber","g0","dec","tho","precedingBackslahes","openingBrackets","closingBrackets","filters","shift"],"mappings":"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"}